`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 02/27/2025 07:04:17 AM
// Design Name: 
// Module Name: Lab_3
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

`define IdleForSS 1'b0
`define ContinuteForSS 1'b1

`define IdleForSM 1'b0
`define OKForSM 1'b1

`define AP_START 2'b00
`define AP_DONE 2'b01
`define AP_IDLE 2'b10

module Lab_3

#( parameter pADDR_WIDTH = 12,
   parameter pDATA_WIDTH = 32,
   parameter Tape_Num = 11
)
(
// axi-lite for configuration, tap-RAM
output wire awready,
output wire wready,
input wire awvalid,
input wire [(pADDR_WIDTH-1):0] awaddr,
input wire wvalid,
input wire [(pDATA_WIDTH-1):0] wdata,
output wire arready,
input wire rready,
input wire arvalid,
input wire [(pADDR_WIDTH-1):0] araddr,
output wire rvalid,
output wire [(pDATA_WIDTH-1):0] rdata,

// axi-stream slave for X[n] input – SS bus
input wire ss_tvalid,
input wire [(pDATA_WIDTH-1):0] ss_tdata,
input wire ss_tlast,
output wire ss_tready,

// axi-stream master for Y[n] output – SM bus
input wire sm_tready,
output wire sm_tvalid,
output wire [(pDATA_WIDTH-1):0] sm_tdata,
output wire sm_tlast,

// bram for tap RAM
output wire [3:0] tap_WE,
output wire tap_EN,
output wire [(pDATA_WIDTH-1):0] tap_Di,
output wire [(pADDR_WIDTH-1):0] tap_A,
input wire [(pDATA_WIDTH-1):0] tap_Do,

// bram for data RAM
output wire [3:0] data_WE,
output wire data_EN,
output wire [(pDATA_WIDTH-1):0] data_Di,
output wire [(pADDR_WIDTH-1):0] data_A,
input wire [(pDATA_WIDTH-1):0] data_Do,

input wire clk,
input wire rst_n
);

//---------------------------------------------------------------datapath  
wire [(pDATA_WIDTH-1):0] x_sel;
wire [(pDATA_WIDTH-1):0] x_tmp;
wire [(pDATA_WIDTH-1):0] h_tmp;
wire [(pDATA_WIDTH-1):0] m_tmp;
wire [(pDATA_WIDTH-1):0] y_tmp;

reg [(pDATA_WIDTH-1):0] h;
reg [(pDATA_WIDTH-1):0] x;
reg [(pDATA_WIDTH-1):0] m;
reg [(pDATA_WIDTH-1):0] y;
reg [3:0] k;

wire ap_idle;

assign x_sel = (k == 0)? 32'bx : data_Do;
assign x_tmp = x_sel;
assign h_tmp = tap_Do;
assign m_tmp = h * x;
assign y_tmp = m + y;

always @(posedge clk or negedge rst_n) begin
    if(!rst_n | ap_idle) begin
        h <= 0;
        x <= 0;
        m <= 0;
        y <= 0;
    end
    else begin
        h <= h_tmp;
        x <= x_tmp;
        m <= m_tmp;
        y <= y_tmp;
    end
end 

//---------------------------------------------------------------FSM 
//------------------------------for X 
reg ss_idle; //if 1, no data, no compute 
reg state_ss;
reg next_state_ss;

always @(*) begin
    case (state_ss)
    `IdleForSS:
    begin
        if (!ss_tvalid) begin
            next_state_ss <= `IdleForSS;
            ss_idle <= 1;
        end
        else begin
            next_state_ss <= `ContinuteForSS;
            ss_idle <= 0;
        end
    end 
    `ContinuteForSS:
    begin 
        if (!ss_tlast && ss_tvalid) begin
            next_state_ss <= `ContinuteForSS;
            ss_idle <= 0;
        end 
        else begin
            next_state_ss <= `IdleForSS;
            ss_idle <= 1;
        end
    end 
    endcase
end 

always @(posedge clk or negedge rst_n) begin
    if (!rst_n) 
        state_ss <= `IdleForSS;
    else 
        state_ss <= next_state_ss;
end
            
//------------------------------for Y 
reg sm_tlast_reg;
reg state_sm;
reg next_state_sm;
reg [9:0] tcount;
reg length;

assign sm_tlast = sm_tlast_reg;

always @(*) begin
    case (state_sm)
    `IdleForSM:
    begin
        if (sm_tvalid) begin
            next_state_sm <= `OKForSM;
            sm_tlast_reg <= 0;
        end
        else begin
            next_state_sm <= `IdleForSM;
            sm_tlast_reg <= 0;
        end
    end 
    `OKForSM:
    begin
        if (tcount != (Tape_Num * length)) begin
            next_state_sm <= `OKForSM;
            sm_tlast_reg <= 1;
        end
        else begin
            next_state_sm <= `IdleForSM;
            sm_tlast_reg <= 1;
        end
    end 
    endcase
end 

always @(posedge clk or negedge rst_n) begin
    if (!rst_n) 
        state_sm <= `IdleForSM;
    else 
        state_sm <= next_state_sm;
end

//----------------------------for tfinal
wire [9:0] tcount_clk;
    
assign tcount_clk = (!sm_tvalid && rst_n) ? tcount + 1'b1 : tcount;

always @(posedge clk or negedge rst_n) begin
    if (!rst_n || (ap_idle))
            tcount <= 0; 
        else
            tcount <= tcount_clk;
end

//-----------------------------------------------------------------address generation 
wire [3:0] x_cnt;
wire [5:0] data_A_tmp;
wire [5:0] tap_AR;
wire [3:0] k_tmp;
wire x_en;
wire k_j;

assign k_j = (k != Tape_Num -1) ? 1 :0;
assign k_tmp = (k_j) ? (k + 1) : 4'd0;
assign tap_AR = (!ap_idle)? (12'h80 + 4 * k) : araddr[5:0];
assign x_en = !ap_idle | k_j;
assign x_cnt = (x_en) ? 0 : x_cnt + 1'b1;
assign data_A_tmp = (k <= x_cnt)? 4 * (x_cnt - k) : 4 * (11 + x_cnt - k);

always @(posedge clk or negedge rst_n) begin
    if (!rst_n)
        k <= 0;
    else 
        k <= k_tmp;
end 

//------------------------------------------------------------------------axi-lite
reg awvalid_d;
reg arvalid_d;
reg wvalid_d;

assign awready = awvalid_d;
assign wready = wvalid_d;
assign arready = arvalid_d | arvalid;
assign rvalid = rready & arvalid_d;
assign rdata   = (araddr[7:0] == 8'd0)? ap_ctrl : tap_Do;

always @ (posedge clk) begin
    awvalid_d <= awvalid;        
    arvalid_d <= arvalid;        
    wvalid_d <= wvalid;        
end 

//----------------------------------------------configuration register address  
reg [2:0] ap_ctrl; //0x00 
reg [4:0] ap_l;    //0x10-0x14 
reg [5:0] ap_n;    //number of taps 
reg [1:0] ap_tap;  //Tap Parameters 
reg addrmap_state;
reg addrmap_state_next;

wire ap_start;
wire ap_done;

assign ap_start = ap_ctrl[0];
assign ap_done = ap_ctrl[1];
assign ap_idle = ap_ctrl[2];

always @(*) begin
    if (addrmap_state == `AP_START)
        ap_ctrl[0] <= 1;
    else
        ap_ctrl[0] <= 0;
    
    if (addrmap_state == `AP_DONE) 
        ap_ctrl[1] <= 1;
    else
        ap_ctrl[1] <= 0;
    
    if (addrmap_state == `AP_IDLE)
        ap_ctrl[2] <= 1;
    else 
        ap_ctrl[2] <= 0;
end 

always @(*) begin
    case(addrmap_state)
        `AP_START:
        begin 
            if (awaddr == 12'b0 && sm_tvalid && sm_tlast && ss_tlast)
                addrmap_state_next <= `AP_DONE;
            else
                addrmap_state_next <= `AP_START;
        end 
        `AP_DONE:
        begin
            if(awaddr == 12'b0 && (arvalid || rvalid))
                addrmap_state_next <= `AP_IDLE;
            else 
                addrmap_state_next <= `AP_DONE;
        end 
        `AP_IDLE:
        begin
            if(awaddr <= 12'b0 && ss_tvalid) 
                addrmap_state_next <= `AP_START;
            else 
                addrmap_state_next <= `AP_IDLE;
        end 
        default:
        begin 
            if(awaddr <= 12'b0 && ss_tvalid) 
                addrmap_state_next <= `AP_START;
            else 
                addrmap_state_next <= `AP_IDLE;
        end 
    endcase 
end 

always @(posedge clk or negedge rst_n) begin
    if (!rst_n)
        addrmap_state <= `AP_IDLE; 
    else
        addrmap_state <= addrmap_state_next;
end 

//---------------0x10-0x14
reg wdata_l;
wire length_wire;

assign length_wire = (awaddr[7:3] == 5'b00010) ? wdata_l : length;

always @(posedge clk or negedge rst_n) begin
    if (!rst_n)
        length <= 0;
    else
        length <= length_wire;
end

always @(posedge clk or negedge rst_n) begin
    if (!rst_n)
        wdata_l <= 0;
    else if (wvalid)
        wdata_l <= wdata_l + 1;
    else 
        wdata_l <= wdata_l;
end

//----------------0x40-0xFF 
assign tap_EN = 1;
assign tap_WE = ((wvalid == 1) && (awaddr[7:0] != 0))? 4'b1111 : 4'b0000;
assign tap_A  = (awvalid == 1)? awaddr[5:0] : tap_AR[5:0]; 
assign tap_Di = wdata;

//-----------------data_RAM 
wire [5:0] ini_addr_n;
reg  [5:0] ini_addr;

assign data_EN = 1; 
assign data_WE = (ss_tready && ss_idle || ini_addr != 6'd44)? 4'b1111 : 4'b0000;  
assign data_A  = (ap_ctrl[2] == 1 && ini_addr != 6'd44)? ini_addr : data_A_tmp; 
assign data_Di = (ap_ctrl[2] == 1 && ini_addr != 6'd44)? 0 : ss_tdata;

assign ini_addr_n = (ini_addr == 6'd44)? ini_addr : ini_addr + 6'd4;
    
always @(posedge clk or negedge rst_n) begin
    if (!rst_n)
        ini_addr <= -6'd4;
    else
        ini_addr <= ini_addr_n;
end

// ----------Stream-in X
assign ss_tready = (ap_idle == 0 && ini_addr == 6'd44 && k == 4'd0)? 1'b1 : 1'b0;

// ----------Stream-out Y
reg  [3:0] ycount;   
wire [3:0] ycount_wire;
    
assign sm_tvalid = (ycount == 0)? 1 : 0;
assign sm_tdata = y;                         
assign sm_tlast = sm_tlast_reg; 

assign ycount_wire = (ycount != 4'd10 && ap_idle == 0)? ycount + 1 : 0;
    
always @(posedge clk or negedge rst_n) begin
    if (!rst_n || ap_idle)
        ycount <= 0;
    else
        ycount <= ycount_wire;
end


endmodule

